{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Arachne\/documentation\/Arachne\/GettingStarted"},"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/Arachne\/documentation\/Arachne"],["doc:\/\/Arachne\/documentation\/Arachne","doc:\/\/Arachne\/documentation\/Arachne\/ArachneService"]]},"metadata":{"title":"Getting Started with Arachne","modules":[{"name":"Arachne"}],"role":"collectionGroup"},"abstract":[{"text":"Create an API service definition and make calls to its endpoints.","type":"text"}],"seeAlsoSections":[{"title":"Creating your service","generated":true,"identifiers":["doc:\/\/Arachne\/documentation\/Arachne\/ArachneService","doc:\/\/Arachne\/documentation\/Arachne\/HttpMethod"]}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"Create-your-service-definition","text":"Create your service definition","type":"heading"},{"inlineContent":[{"text":"You start by defining your APIs","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example:"}]},{"code":["import Foundation","import Arachne","","enum MyAPIService {","    case info","    case userProfile(username: String)","    case postEndpoint(body: MyCodableObject, limit: Int)","}","","extension MyAPIService: ArachneService {","    var baseUrl: String {","        \"https:\/\/myapiservice.com\"","    }","","    var path: String {","        switch self {","        case .info:","            \"\/info\"","        case .userProfile(let username):","            \"\/users\/\\(username)\"","        case .postEndpoint:","            \"\/postendpoint\"","        }","    }","","    var queryStringItems: [URLQueryItem]? {","        switch self {","        case .postEndpoint(_, let limit):","            [URLQueryItem(name: \"limit\", value: \"\\(limit)\")]","        default:","            nil","        }","    }","","    var method: HttpMethod {","        switch self {","        case .postEndpoint:","            .post","        default:","            .get","        }","    }","","    var body: Data? {","        switch self {","        case .postEndpoint(let myCodableObject, _):","            try? JSONEncoder().encode(myCodableObject)","        default:","            nil","        }","    }","","    var headers: [String : String]? {","        switch self {","        case .postEndpoint:","            nil","        default:","            [\"Accept\": \"application\/json\"]","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Call endpoints","type":"heading","level":2,"anchor":"Call-endpoints"},{"inlineContent":[{"type":"text","text":"Declare your provider"}],"type":"paragraph"},{"code":["let provider = ArachneProvider<MyAPIService>()"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Get data from your endpoint","type":"text"}],"type":"paragraph"},{"code":["let (data, _) = try await provider.data(.info)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Letâ€™s see it assembled in an extract of a SwiftUI app","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["import SwiftUI","import Arachne","import os","","struct Info: Codable {","    let name: String","}","","class MyApiClient {","    private let provider = ArachneProvider<MyAPIService>()","","    func loadInfo() async throws -> Info {","        let (data, _) = try await provider.data(.info)","        return try JSONDecoder().decode(Info.self, from: data)","    }","}","","@Observable","class MyState {","    private let apiClient = MyApiClient()","    private let logger = Logger(subsystem: \"Arachne\", category: \"MyInteractor\")","","    var info: Info?","","    func getInfo() async {","        do {","            self.info = try await apiClient.loadInfo()","        } catch {","            logger.error(\"Error: \\(error.localizedDescription)\")","        }","    }","}","","struct MyView: View {","    @State var state = MyState()","","    var body: some View {","        Text(state.info?.name ?? \"No name\")","            .task {","                await viewModel.getInfo()","            }","    }","}"],"type":"codeListing"}]}],"variants":[{"paths":["\/documentation\/arachne\/gettingstarted"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"article","sections":[],"references":{"doc://Arachne/documentation/Arachne":{"abstract":[{"type":"text","text":"Arachne is a lightweight, minimalistic, zero dependencies networking layer for apps using Swift Concurrency (async\/await) developed in Swift, that provides an opinionated abstraction layer to remove boilerplate code."}],"url":"\/documentation\/arachne","kind":"symbol","type":"topic","role":"collection","identifier":"doc:\/\/Arachne\/documentation\/Arachne","title":"Arachne"},"doc://Arachne/documentation/Arachne/HttpMethod":{"navigatorTitle":[{"kind":"identifier","text":"HttpMethod"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HttpMethod"}],"abstract":[{"type":"text","text":"HTTP methods enumeration"}],"url":"\/documentation\/arachne\/httpmethod","kind":"symbol","type":"topic","role":"symbol","identifier":"doc:\/\/Arachne\/documentation\/Arachne\/HttpMethod","title":"HttpMethod"},"doc://Arachne/documentation/Arachne/ArachneService":{"role":"symbol","url":"\/documentation\/arachne\/arachneservice","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ArachneService"}],"type":"topic","title":"ArachneService","abstract":[{"type":"text","text":"Build an "},{"code":"enum","type":"codeVoice"},{"text":" that extends this ","type":"text"},{"type":"codeVoice","code":"Protocol"},{"type":"text","text":" to represent your API service."}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"ArachneService","kind":"identifier"}],"identifier":"doc:\/\/Arachne\/documentation\/Arachne\/ArachneService"}}}